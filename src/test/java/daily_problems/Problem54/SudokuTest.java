package daily_problems.Problem54;

import daily_problems.Problem54.Sudoku;
import org.junit.Assert;
import org.junit.Test;

public class SudokuTest {

    Sudoku sudoku = new Sudoku();

    @Test
    public void sudokuReturnsTrueIfValidBoard() {
        char[][] board = {
                {'.', '.', '.', '7', '.', '.', '3', '.', '1'},
                {'3', '.', '.', '9', '.', '.', '.', '.', '.'},
                {'.', '4', '.', '3', '1', '.', '2', '.', '.'},
                {'.', '6', '.', '4', '.', '.', '5', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '1', '.', '.', '8', '.', '4', '.'},
                {'.', '.', '6', '.', '2', '1', '.', '5', '.'},
                {'.', '.', '.', '.', '.', '9', '.', '.', '8'},
                {'8', '.', '5', '.', '.', '4', '.', '.', '.'}
        };

        Assert.assertTrue(sudoku.sudokuSolver(board));

        char[][] board4 = {
                {'.','.','5','.','.','2','.','.','.'},
                {'.','.','9','.','4','7','.','2','.'},
                {'.','.','8','.','5','6','.','.','1'},
                {'.','.','.','.','.','8','3','4','.'},
                {'.','.','.','.','.','.','.','.','6'},
                {'.','.','.','.','3','.','1','8','.'},
                {'.','2','.','.','.','.','.','.','.'},
                {'.','9','.','.','8','.','6','7','.'},
                {'3','.','6','5','7','.','.','.','.'}};

        Assert.assertTrue(sudoku.sudokuSolver(board4));
    }

    @Test
    public void sudokuReturnsFalseIfInValidBoard() {
        char[][] board2 = {
                {'.','2','3','4','5','6','7','8','9'},
                {'1','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'}};


        Assert.assertFalse(sudoku.sudokuSolver(board2));


        char[][] board3 = {
                {'.','8','9','.','4','.','6','.','5'},
                {'.','7','.','.','.','8','.','4','1'},
                {'5','6','.','9','.','.','.','.','8'},
                {'.','.','.','7','.','5','.','9','.'},
                {'.','9','.','4','.','1','.','5','.'},
                {'.','3','.','9','.','6','.','1','.'},
                {'8','.','.','.','.','.','.','.','7'},
                {'.','2','.','8','.','.','.','6','.'},
                {'.','.','6','.','7','.','.','8','.'}};

        Assert.assertFalse(sudoku.sudokuSolver(board3));
    }
}
